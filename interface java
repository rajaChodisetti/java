package com.deloitte.abstraction.demo;


public class Runner{	
	public static void main(String[] args) {
		// create object of SQUARE
		Square s = new Square();
		System.out.println("Sq Area :" + s.area(4, 4));
		System.out.println("Sq Volume :" + s.volume(4, 4, 4));
		System.out.println("Sq Perimeter :" + s.perimeter(4, 4));
		
		// create object of RECTANGLE
		Shapes r = new Rectangle();
		System.out.println("Rec Area :" + r.area(10, 4));
		System.out.println("Rec Volume :" + r.volume(10, 4, 2));
		System.out.println("Rec Perimeter :" + r.perimeter(10, 4));
	}
}



interface Shapes{
	public abstract int area(int l, int b);
	public int volume(int l, int b, int h);
	public int perimeter(int l, int b);
}


class Square implements Shapes{
	@Override
	public int area(int l, int b) {
		return l*b;
	}

	@Override
	public int volume(int l, int b, int h) {
		return l*b*h;
	}

	@Override
	public int perimeter(int l, int b) {
		return 4*l;
	}
	
	public void printSq() {
		
	}
	
}

class Rectangle implements Shapes {
	@Override
	public int area(int l, int b) {
		return l*b;
	}

	@Override
	public int volume(int l, int b, int h) {
		return ((l*b) + (b*h) + (h*l));
	}

	@Override
	public int perimeter(int l, int b) {
		return 2*(l+b);
	}
	
	public void printRec() {
		
	}
}

